<?php

namespace App\Http\Controllers\Api\V1\Resources;

use App\Http\Controllers\Api\V1\BaseResourceController;
use App\Http\Requests\StoreRoyaltyRequest;
use App\Http\Resources\RoyaltyResource;
use App\Models\Franchise;
use App\Models\Royalty;
use App\Models\Unit;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class RoyaltyController extends BaseResourceController
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request): JsonResponse
    {
        $query = Royalty::with(['franchise', 'unit', 'franchisee', 'generatedBy']);

        // Apply filters
        if ($request->has('status') && $request->status !== 'all') {
            $query->byStatus($request->status);
        }

        if ($request->has('type')) {
            $query->byType($request->type);
        }

        if ($request->has('franchise_id')) {
            $query->byFranchise($request->franchise_id);
        }

        if ($request->has('unit_id')) {
            $query->byUnit($request->unit_id);
        }

        if ($request->has('franchisee_id')) {
            $query->where('franchisee_id', $request->franchisee_id);
        }

        if ($request->has('period_year') && $request->has('period_month')) {
            $query->byPeriod($request->period_year, $request->period_month);
        }

        if ($request->has('is_auto_generated')) {
            $query->autoGenerated();
        }

        if ($request->has('overdue')) {
            $query->overdue();
        }

        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('royalty_number', 'like', "%{$search}%")
                    ->orWhere('notes', 'like', "%{$search}%")
                    ->orWhereHas('franchisee', function ($q) use ($search) {
                        $q->where('name', 'like', "%{$search}%");
                    });
            });
        }

        // Apply sorting
        $sortBy = $request->get('sort_by', 'due_date');
        $sortOrder = $request->get('sort_order', 'desc');
        $query->orderBy($sortBy, $sortOrder);

        // Pagination
        $perPage = $this->getPaginationParams($request);
        $royalties = $query->paginate($perPage);

        return $this->successResponse([
            'data' => RoyaltyResource::collection($royalties->items()),
            'current_page' => $royalties->currentPage(),
            'last_page' => $royalties->lastPage(),
            'per_page' => $royalties->perPage(),
            'total' => $royalties->total(),
        ], 'Royalties retrieved successfully');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(StoreRoyaltyRequest $request): JsonResponse
    {
        $validated = $request->validated();

        $royalty = Royalty::create($validated);

        return $this->successResponse($royalty->load(['franchise', 'unit', 'franchisee']), 'Royalty created successfully', 201);
    }

    /**
     * Display the specified resource.
     */
    public function show(Royalty $royalty): JsonResponse
    {
        $royalty->load(['franchise', 'unit', 'franchisee', 'generatedBy']);

        return $this->successResponse($royalty, 'Royalty retrieved successfully');
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Royalty $royalty): JsonResponse
    {
        $validated = $request->validate([
            'franchise_id' => 'sometimes|exists:franchises,id',
            'unit_id' => 'nullable|exists:units,id',
            'franchisee_id' => 'sometimes|exists:users,id',
            'type' => 'sometimes|in:monthly,quarterly,annual,special',
            'period_year' => 'sometimes|integer|min:2020|max:2030',
            'period_month' => 'nullable|integer|min:1|max:12',
            'period_quarter' => 'nullable|integer|min:1|max:4',
            'base_revenue' => 'sometimes|numeric|min:0',
            'royalty_rate' => 'sometimes|numeric|min:0|max:100',
            'royalty_amount' => 'sometimes|numeric|min:0',
            'marketing_fee_rate' => 'nullable|numeric|min:0|max:100',
            'marketing_fee_amount' => 'nullable|numeric|min:0',
            'technology_fee_rate' => 'nullable|numeric|min:0|max:100',
            'technology_fee_amount' => 'nullable|numeric|min:0',
            'other_fees' => 'nullable|numeric|min:0',
            'adjustments' => 'nullable|numeric',
            'total_amount' => 'sometimes|numeric|min:0',
            'due_date' => 'sometimes|date',
            'status' => 'sometimes|in:pending,paid,overdue,cancelled',
            'description' => 'nullable|string|max:500',
            'notes' => 'nullable|string',
            'metadata' => 'nullable|array',
            'attachments' => 'nullable|array',
        ]);

        $royalty->update($validated);

        return $this->successResponse($royalty->load(['franchise', 'unit', 'franchisee']), 'Royalty updated successfully');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Royalty $royalty): JsonResponse
    {
        // Check if royalty can be deleted
        if ($royalty->status === 'paid') {
            return $this->validationErrorResponse(['status' => 'Cannot delete paid royalty'], 'Cannot delete paid royalty');
        }

        $royalty->delete();

        return $this->successResponse(null, 'Royalty deleted successfully');
    }

    /**
     * Mark royalty as paid
     */
    public function markAsPaid(Request $request, Royalty $royalty): JsonResponse
    {
        $validated = $request->validate([
            'amount_paid' => 'required|numeric|min:0',
            'payment_date' => 'required|date',
            'payment_method' => 'required|string|max:100',
            'payment_reference' => 'nullable|string|max:255',
            'notes' => 'nullable|string',
            'attachment' => 'nullable|file|mimes:pdf,jpg,jpeg,png,doc,docx|max:10240',
        ]);

        // Handle file upload if present
        if ($request->hasFile('attachment')) {
            $file = $request->file('attachment');
            $path = $file->store('royalty-attachments', 'public');
            $royalty->addAttachment($path);
        }

        // Mark as paid
        $royalty->markAsPaid(
            $validated['payment_method'],
            $validated['payment_reference'] ?? null
        );

        // Update payment date if different from default
        if (isset($validated['payment_date'])) {
            $royalty->update(['paid_date' => $validated['payment_date']]);
        }

        // Add notes if provided
        if (isset($validated['notes'])) {
            $royalty->update(['notes' => $validated['notes']]);
        }

        return $this->successResponse($royalty->fresh(['franchise', 'unit', 'franchisee']), 'Royalty marked as paid successfully');
    }

    /**
     * Calculate late fee for overdue royalty
     */
    public function calculateLateFee(Royalty $royalty): JsonResponse
    {
        $lateFee = $royalty->calculateLateFee();

        return $this->successResponse([
            'royalty' => $royalty,
            'late_fee' => $lateFee,
            'days_overdue' => $royalty->days_overdue,
        ], 'Late fee calculated successfully');
    }

    /**
     * Add adjustment to royalty
     */
    public function addAdjustment(Request $request, Royalty $royalty): JsonResponse
    {
        $validated = $request->validate([
            'adjustment_amount' => 'required|numeric',
            'adjustment_reason' => 'required|string|max:500',
        ]);

        $royalty->addAdjustment($validated['adjustment_amount'], $validated['adjustment_reason']);

        return $this->successResponse($royalty, 'Adjustment added successfully');
    }

    /**
     * Add attachment to royalty
     */
    public function addAttachment(Request $request, Royalty $royalty): JsonResponse
    {
        $validated = $request->validate([
            'attachment_url' => 'required|string|max:500',
            'attachment_name' => 'required|string|max:255',
        ]);

        $royalty->addAttachment($validated['attachment_url'], $validated['attachment_name']);

        return $this->successResponse($royalty, 'Attachment added successfully');
    }

    /**
     * Generate monthly royalties for all franchises
     */
    public function generateMonthlyRoyalties(Request $request): JsonResponse
    {
        $validated = $request->validate([
            'year' => 'required|integer|min:2020|max:2030',
            'month' => 'required|integer|min:1|max:12',
            'franchise_id' => 'nullable|exists:franchises,id',
        ]);

        $royalties = Royalty::generateMonthlyRoyalties(
            $validated['year'],
            $validated['month'],
            $validated['franchise_id'] ?? null
        );

        return $this->successResponse($royalties, 'Monthly royalties generated successfully');
    }

    /**
     * Get pending royalties
     */
    public function pending(Request $request): JsonResponse
    {
        $query = Royalty::pending()->with(['franchise', 'unit', 'franchisee']);

        // Apply filters
        if ($request->has('franchise_id')) {
            $query->byFranchise($request->franchise_id);
        }

        if ($request->has('unit_id')) {
            $query->byUnit($request->unit_id);
        }

        $perPage = $this->getPaginationParams($request);
        $royalties = $query->paginate($perPage);

        return $this->successResponse($royalties, 'Pending royalties retrieved successfully');
    }

    /**
     * Get overdue royalties
     */
    public function overdue(Request $request): JsonResponse
    {
        $query = Royalty::overdue()->with(['franchise', 'unit', 'franchisee']);

        // Apply filters
        if ($request->has('franchise_id')) {
            $query->byFranchise($request->franchise_id);
        }

        if ($request->has('unit_id')) {
            $query->byUnit($request->unit_id);
        }

        $perPage = $this->getPaginationParams($request);
        $royalties = $query->paginate($perPage);

        return $this->successResponse($royalties, 'Overdue royalties retrieved successfully');
    }

    /**
     * Get royalty statistics
     */
    public function statistics(Request $request): JsonResponse
    {
        // For franchisor routes, filter by their franchises
        $user = $request->user();
        $franchiseIds = Franchise::where('franchisor_id', $user->id)->pluck('id');

        $query = Royalty::whereIn('franchise_id', $franchiseIds);

        // Apply additional filters
        if ($request->has('franchise_id')) {
            $query->byFranchise($request->franchise_id);
        }

        if ($request->has('unit_id')) {
            $query->byUnit($request->unit_id);
        }

        if ($request->has('year')) {
            $query->where('period_year', $request->year);
        }

        $stats = [
            'royalty_collected_till_date' => (clone $query)->paid()->sum('total_amount'),
            'upcoming_royalties' => (clone $query)->pending()->sum('total_amount'),
            'total_royalties' => (clone $query)->count(),
            'total_amount' => (clone $query)->sum('total_amount'),
            'pending_royalties' => (clone $query)->pending()->count(),
            'pending_amount' => (clone $query)->pending()->sum('total_amount'),
            'paid_royalties' => (clone $query)->paid()->count(),
            'paid_amount' => (clone $query)->paid()->sum('total_amount'),
            'overdue_royalties' => (clone $query)->overdue()->count(),
            'overdue_amount' => (clone $query)->overdue()->sum('total_amount'),
            'auto_generated_royalties' => (clone $query)->autoGenerated()->count(),
            'royalties_by_type' => (clone $query)->groupBy('type')
                ->selectRaw('type, count(*) as count, sum(total_amount) as total_amount')
                ->get()
                ->keyBy('type'),
            'royalties_by_status' => (clone $query)->groupBy('status')
                ->selectRaw('status, count(*) as count, sum(total_amount) as total_amount')
                ->get()
                ->keyBy('status'),
            'monthly_royalties' => (clone $query)->where('type', 'royalty')
                ->selectRaw('period_year, period_month, count(*) as count, sum(total_amount) as total_amount')
                ->groupBy('period_year', 'period_month')
                ->orderBy('period_year', 'desc')
                ->orderBy('period_month', 'desc')
                ->limit(12)
                ->get(),
            'average_royalty_amount' => (clone $query)->avg('total_amount'),
            'collection_rate' => (clone $query)->count() > 0 ?
                ((clone $query)->paid()->count() / (clone $query)->count()) * 100 : 0,
        ];

        return $this->successResponse($stats, 'Royalty statistics retrieved successfully');
    }

    /**
     * Export royalty data
     */
    public function export(Request $request)
    {
        $validated = $request->validate([
            'format' => 'required|in:csv,excel',
            'data_type' => 'required|in:all,paid,pending,overdue',
            'period' => 'nullable|in:daily,monthly,yearly',
        ]);

        $query = Royalty::with(['franchise', 'unit', 'franchisee']);

        // Filter by data type
        if ($validated['data_type'] !== 'all') {
            $query->byStatus($validated['data_type']);
        }

        $royalties = $query->get();

        if ($validated['format'] === 'csv') {
            return $this->exportToCsv($royalties);
        }

        return $this->exportToExcel($royalties);
    }

    /**
     * Export royalties to CSV
     */
    protected function exportToCsv($royalties)
    {
        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => 'attachment; filename="royalties-'.now()->format('Y-m-d').'.csv"',
        ];

        $callback = function () use ($royalties) {
            $file = fopen('php://output', 'w');

            // Add CSV headers
            fputcsv($file, [
                'Royalty Number',
                'Billing Period',
                'Franchisee Name',
                'Store Location',
                'Due Date',
                'Gross Sales (SAR)',
                'Royalty %',
                'Amount (SAR)',
                'Status',
                'Paid Date',
            ]);

            // Add data rows
            foreach ($royalties as $royalty) {
                fputcsv($file, [
                    $royalty->royalty_number,
                    $royalty->period_description,
                    $royalty->franchisee->name ?? 'N/A',
                    $royalty->unit->location ?? 'N/A',
                    $royalty->due_date?->format('Y-m-d'),
                    $royalty->gross_revenue,
                    $royalty->royalty_percentage,
                    $royalty->total_amount,
                    $royalty->status,
                    $royalty->paid_date?->format('Y-m-d') ?? 'N/A',
                ]);
            }

            fclose($file);
        };

        return response()->stream($callback, 200, $headers);
    }

    /**
     * Export royalties to Excel
     */
    protected function exportToExcel($royalties)
    {
        // For now, return CSV format
        // In production, you would use a package like PhpSpreadsheet
        return $this->exportToCsv($royalties);
    }

    /**
     * Get current user's royalties (for franchisors)
     */
    public function myRoyalties(Request $request): JsonResponse
    {
        $user = $request->user();

        // Get all franchises owned by this franchisor
        $franchiseIds = Franchise::where('franchisor_id', $user->id)->pluck('id');

        if ($franchiseIds->isEmpty()) {
            return $this->successResponse([
                'data' => [],
                'current_page' => 1,
                'last_page' => 1,
                'per_page' => 15,
                'total' => 0,
            ], 'No franchises found for current user');
        }

        $query = Royalty::whereIn('franchise_id', $franchiseIds)
            ->with(['franchise', 'unit', 'franchisee']);

        // Apply filters
        if ($request->has('status') && $request->status !== 'all') {
            $query->byStatus($request->status);
        }

        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('royalty_number', 'like', "%{$search}%")
                    ->orWhere('notes', 'like', "%{$search}%");
            });
        }

        $perPage = $this->getPaginationParams($request);
        $royalties = $query->paginate($perPage);

        return $this->successResponse([
            'data' => RoyaltyResource::collection($royalties->items()),
            'current_page' => $royalties->currentPage(),
            'last_page' => $royalties->lastPage(),
            'per_page' => $royalties->perPage(),
            'total' => $royalties->total(),
        ], 'Royalties retrieved successfully');
    }

    /**
     * Get current user's unit royalties (for unit managers)
     */
    public function myUnitRoyalties(Request $request): JsonResponse
    {
        $user = $request->user();
        $unit = Unit::where('franchisee_id', $user->id)->first();

        if (! $unit) {
            return $this->notFoundResponse('No unit found for current user');
        }

        $query = Royalty::where('unit_id', $unit->id)
            ->with(['franchise', 'unit', 'franchisee']);

        // Apply filters
        if ($request->has('status') && $request->status !== 'all') {
            $query->byStatus($request->status);
        }

        if ($request->has('period')) {
            if ($request->period === 'daily') {
                $query->whereDate('created_at', now()->toDateString());
            } elseif ($request->period === 'monthly') {
                $query->whereMonth('created_at', now()->month)
                    ->whereYear('created_at', now()->year);
            } elseif ($request->period === 'yearly') {
                $query->whereYear('created_at', now()->year);
            }
        }

        $perPage = $this->getPaginationParams($request);
        $royalties = $query->orderBy('due_date', 'desc')->paginate($perPage);

        return $this->successResponse([
            'data' => RoyaltyResource::collection($royalties->items()),
            'current_page' => $royalties->currentPage(),
            'last_page' => $royalties->lastPage(),
            'per_page' => $royalties->perPage(),
            'total' => $royalties->total(),
        ], 'Unit royalties retrieved successfully');
    }

    /**
     * Get unit royalty statistics for franchisee
     */
    public function myUnitRoyaltyStatistics(Request $request): JsonResponse
    {
        $user = $request->user();
        $unit = Unit::where('franchisee_id', $user->id)->first();

        if (! $unit) {
            return $this->notFoundResponse('No unit found for current user');
        }

        $query = Royalty::where('unit_id', $unit->id);

        // Apply additional filters
        if ($request->has('year')) {
            $query->where('period_year', $request->year);
        }

        $stats = [
            'royalty_collected_till_date' => (clone $query)->paid()->sum('total_amount'),
            'upcoming_royalties' => (clone $query)->pending()->sum('total_amount'),
            'total_royalties' => (clone $query)->count(),
            'total_amount' => (clone $query)->sum('total_amount'),
            'pending_royalties' => (clone $query)->pending()->count(),
            'pending_amount' => (clone $query)->pending()->sum('total_amount'),
            'paid_royalties' => (clone $query)->paid()->count(),
            'paid_amount' => (clone $query)->paid()->sum('total_amount'),
            'overdue_count' => (clone $query)->overdue()->count(),
            'overdue_amount' => (clone $query)->overdue()->sum('total_amount'),
            'auto_generated_royalties' => (clone $query)->autoGenerated()->count(),
            'royalties_by_type' => (clone $query)->groupBy('type')
                ->selectRaw('type, count(*) as count, sum(total_amount) as total_amount')
                ->get()
                ->keyBy('type'),
            'royalties_by_status' => (clone $query)->groupBy('status')
                ->selectRaw('status, count(*) as count, sum(total_amount) as total_amount')
                ->get()
                ->keyBy('status'),
            'monthly_royalties' => (clone $query)->where('type', 'royalty')
                ->selectRaw('period_year, period_month, count(*) as count, sum(total_amount) as total_amount')
                ->groupBy('period_year', 'period_month')
                ->orderBy('period_year', 'desc')
                ->orderBy('period_month', 'desc')
                ->limit(12)
                ->get(),
            'average_royalty_amount' => (clone $query)->avg('total_amount'),
            'payment_rate' => (clone $query)->count() > 0 ?
                ((clone $query)->paid()->count() / (clone $query)->count()) * 100 : 0,
        ];

        return $this->successResponse($stats, 'Unit royalty statistics retrieved successfully');
    }

    /**
     * Export unit royalty data for franchisee
     */
    public function exportMyUnitRoyalties(Request $request)
    {
        $validated = $request->validate([
            'format' => 'required|in:csv,excel',
            'data_type' => 'required|in:all,paid,pending,overdue',
            'period' => 'nullable|in:daily,monthly,yearly',
        ]);

        $user = $request->user();
        $unit = Unit::where('franchisee_id', $user->id)->first();

        if (! $unit) {
            return $this->notFoundResponse('No unit found for current user');
        }

        $query = Royalty::where('unit_id', $unit->id)
            ->with(['franchise', 'unit', 'franchisee']);

        // Filter by data type
        if ($validated['data_type'] !== 'all') {
            $query->byStatus($validated['data_type']);
        }

        $royalties = $query->get();

        if ($validated['format'] === 'csv') {
            return $this->exportToCsv($royalties);
        }

        return $this->exportToExcel($royalties);
    }
}
