<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Royalty;
use App\Models\Franchise;
use App\Models\Unit;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Validation\Rule;

class RoyaltyController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request): JsonResponse
    {
        $query = Royalty::with(['franchise', 'unit', 'franchisee', 'generatedBy']);

        // Apply filters
        if ($request->has('status')) {
            $query->byStatus($request->status);
        }

        if ($request->has('type')) {
            $query->byType($request->type);
        }

        if ($request->has('franchise_id')) {
            $query->byFranchise($request->franchise_id);
        }

        if ($request->has('unit_id')) {
            $query->byUnit($request->unit_id);
        }

        if ($request->has('franchisee_id')) {
            $query->where('franchisee_id', $request->franchisee_id);
        }

        if ($request->has('period_year') && $request->has('period_month')) {
            $query->byPeriod($request->period_year, $request->period_month);
        }

        if ($request->has('is_auto_generated')) {
            $query->autoGenerated();
        }

        if ($request->has('overdue')) {
            $query->overdue();
        }

        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('royalty_number', 'like', "%{$search}%")
                  ->orWhere('description', 'like', "%{$search}%");
            });
        }

        // Apply sorting
        $sortBy = $request->get('sort_by', 'due_date');
        $sortOrder = $request->get('sort_order', 'desc');
        $query->orderBy($sortBy, $sortOrder);

        // Pagination
        $perPage = $request->get('per_page', 15);
        $royalties = $query->paginate($perPage);

        return response()->json([
            'success' => true,
            'data' => $royalties,
            'message' => 'Royalties retrieved successfully'
        ]);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request): JsonResponse
    {
        $validated = $request->validate([
            'franchise_id' => 'required|exists:franchises,id',
            'unit_id' => 'nullable|exists:units,id',
            'franchisee_id' => 'required|exists:users,id',
            'type' => 'required|in:monthly,quarterly,annual,special',
            'period_year' => 'required|integer|min:2020|max:2030',
            'period_month' => 'nullable|integer|min:1|max:12',
            'period_quarter' => 'nullable|integer|min:1|max:4',
            'base_revenue' => 'required|numeric|min:0',
            'royalty_rate' => 'required|numeric|min:0|max:100',
            'royalty_amount' => 'required|numeric|min:0',
            'marketing_fee_rate' => 'nullable|numeric|min:0|max:100',
            'marketing_fee_amount' => 'nullable|numeric|min:0',
            'technology_fee_rate' => 'nullable|numeric|min:0|max:100',
            'technology_fee_amount' => 'nullable|numeric|min:0',
            'other_fees' => 'nullable|numeric|min:0',
            'adjustments' => 'nullable|numeric',
            'total_amount' => 'required|numeric|min:0',
            'due_date' => 'required|date',
            'status' => 'required|in:pending,paid,overdue,cancelled',
            'description' => 'nullable|string|max:500',
            'notes' => 'nullable|string',
            'metadata' => 'nullable|array',
            'attachments' => 'nullable|array',
            'is_auto_generated' => 'boolean'
        ]);

        $royalty = Royalty::create($validated);

        return response()->json([
            'success' => true,
            'data' => $royalty->load(['franchise', 'unit', 'franchisee']),
            'message' => 'Royalty created successfully'
        ], 201);
    }

    /**
     * Display the specified resource.
     */
    public function show(Royalty $royalty): JsonResponse
    {
        $royalty->load(['franchise', 'unit', 'franchisee', 'generatedBy']);

        return response()->json([
            'success' => true,
            'data' => $royalty,
            'message' => 'Royalty retrieved successfully'
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Royalty $royalty): JsonResponse
    {
        $validated = $request->validate([
            'franchise_id' => 'sometimes|exists:franchises,id',
            'unit_id' => 'nullable|exists:units,id',
            'franchisee_id' => 'sometimes|exists:users,id',
            'type' => 'sometimes|in:monthly,quarterly,annual,special',
            'period_year' => 'sometimes|integer|min:2020|max:2030',
            'period_month' => 'nullable|integer|min:1|max:12',
            'period_quarter' => 'nullable|integer|min:1|max:4',
            'base_revenue' => 'sometimes|numeric|min:0',
            'royalty_rate' => 'sometimes|numeric|min:0|max:100',
            'royalty_amount' => 'sometimes|numeric|min:0',
            'marketing_fee_rate' => 'nullable|numeric|min:0|max:100',
            'marketing_fee_amount' => 'nullable|numeric|min:0',
            'technology_fee_rate' => 'nullable|numeric|min:0|max:100',
            'technology_fee_amount' => 'nullable|numeric|min:0',
            'other_fees' => 'nullable|numeric|min:0',
            'adjustments' => 'nullable|numeric',
            'total_amount' => 'sometimes|numeric|min:0',
            'due_date' => 'sometimes|date',
            'status' => 'sometimes|in:pending,paid,overdue,cancelled',
            'description' => 'nullable|string|max:500',
            'notes' => 'nullable|string',
            'metadata' => 'nullable|array',
            'attachments' => 'nullable|array'
        ]);

        $royalty->update($validated);

        return response()->json([
            'success' => true,
            'data' => $royalty->load(['franchise', 'unit', 'franchisee']),
            'message' => 'Royalty updated successfully'
        ]);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Royalty $royalty): JsonResponse
    {
        // Check if royalty can be deleted
        if ($royalty->status === 'paid') {
            return response()->json([
                'success' => false,
                'message' => 'Cannot delete paid royalty'
            ], 422);
        }

        $royalty->delete();

        return response()->json([
            'success' => true,
            'message' => 'Royalty deleted successfully'
        ]);
    }

    /**
     * Mark royalty as paid
     */
    public function markAsPaid(Request $request, Royalty $royalty): JsonResponse
    {
        $validated = $request->validate([
            'payment_date' => 'nullable|date',
            'payment_method' => 'nullable|string|max:100',
            'payment_reference' => 'nullable|string|max:255',
            'payment_notes' => 'nullable|string'
        ]);

        $royalty->markAsPaid(
            $validated['payment_date'] ?? now(),
            $validated['payment_method'] ?? null,
            $validated['payment_reference'] ?? null,
            $validated['payment_notes'] ?? null
        );

        return response()->json([
            'success' => true,
            'data' => $royalty,
            'message' => 'Royalty marked as paid successfully'
        ]);
    }

    /**
     * Calculate late fee for overdue royalty
     */
    public function calculateLateFee(Royalty $royalty): JsonResponse
    {
        $lateFee = $royalty->calculateLateFee();

        return response()->json([
            'success' => true,
            'data' => [
                'royalty' => $royalty,
                'late_fee' => $lateFee,
                'days_overdue' => $royalty->days_overdue
            ],
            'message' => 'Late fee calculated successfully'
        ]);
    }

    /**
     * Add adjustment to royalty
     */
    public function addAdjustment(Request $request, Royalty $royalty): JsonResponse
    {
        $validated = $request->validate([
            'adjustment_amount' => 'required|numeric',
            'adjustment_reason' => 'required|string|max:500'
        ]);

        $royalty->addAdjustment($validated['adjustment_amount'], $validated['adjustment_reason']);

        return response()->json([
            'success' => true,
            'data' => $royalty,
            'message' => 'Adjustment added successfully'
        ]);
    }

    /**
     * Add attachment to royalty
     */
    public function addAttachment(Request $request, Royalty $royalty): JsonResponse
    {
        $validated = $request->validate([
            'attachment_url' => 'required|string|max:500',
            'attachment_name' => 'required|string|max:255'
        ]);

        $royalty->addAttachment($validated['attachment_url'], $validated['attachment_name']);

        return response()->json([
            'success' => true,
            'data' => $royalty,
            'message' => 'Attachment added successfully'
        ]);
    }

    /**
     * Generate monthly royalties for all franchises
     */
    public function generateMonthlyRoyalties(Request $request): JsonResponse
    {
        $validated = $request->validate([
            'year' => 'required|integer|min:2020|max:2030',
            'month' => 'required|integer|min:1|max:12',
            'franchise_id' => 'nullable|exists:franchises,id'
        ]);

        $royalties = Royalty::generateMonthlyRoyalties(
            $validated['year'],
            $validated['month'],
            $validated['franchise_id'] ?? null
        );

        return response()->json([
            'success' => true,
            'data' => $royalties,
            'message' => 'Monthly royalties generated successfully'
        ]);
    }

    /**
     * Get pending royalties
     */
    public function pending(Request $request): JsonResponse
    {
        $query = Royalty::pending()->with(['franchise', 'unit', 'franchisee']);

        // Apply filters
        if ($request->has('franchise_id')) {
            $query->byFranchise($request->franchise_id);
        }

        if ($request->has('unit_id')) {
            $query->byUnit($request->unit_id);
        }

        $perPage = $request->get('per_page', 15);
        $royalties = $query->paginate($perPage);

        return response()->json([
            'success' => true,
            'data' => $royalties,
            'message' => 'Pending royalties retrieved successfully'
        ]);
    }

    /**
     * Get overdue royalties
     */
    public function overdue(Request $request): JsonResponse
    {
        $query = Royalty::overdue()->with(['franchise', 'unit', 'franchisee']);

        // Apply filters
        if ($request->has('franchise_id')) {
            $query->byFranchise($request->franchise_id);
        }

        if ($request->has('unit_id')) {
            $query->byUnit($request->unit_id);
        }

        $perPage = $request->get('per_page', 15);
        $royalties = $query->paginate($perPage);

        return response()->json([
            'success' => true,
            'data' => $royalties,
            'message' => 'Overdue royalties retrieved successfully'
        ]);
    }

    /**
     * Get royalty statistics
     */
    public function statistics(Request $request): JsonResponse
    {
        $query = Royalty::query();

        // Apply filters
        if ($request->has('franchise_id')) {
            $query->byFranchise($request->franchise_id);
        }

        if ($request->has('unit_id')) {
            $query->byUnit($request->unit_id);
        }

        if ($request->has('year')) {
            $query->where('period_year', $request->year);
        }

        $stats = [
            'total_royalties' => $query->count(),
            'total_amount' => $query->sum('total_amount'),
            'pending_royalties' => $query->pending()->count(),
            'pending_amount' => $query->pending()->sum('total_amount'),
            'paid_royalties' => $query->paid()->count(),
            'paid_amount' => $query->paid()->sum('total_amount'),
            'overdue_royalties' => $query->overdue()->count(),
            'overdue_amount' => $query->overdue()->sum('total_amount'),
            'auto_generated_royalties' => $query->autoGenerated()->count(),
            'royalties_by_type' => $query->groupBy('type')
                ->selectRaw('type, count(*) as count, sum(total_amount) as total_amount')
                ->get()
                ->keyBy('type'),
            'royalties_by_status' => $query->groupBy('status')
                ->selectRaw('status, count(*) as count, sum(total_amount) as total_amount')
                ->get()
                ->keyBy('status'),
            'monthly_royalties' => $query->where('type', 'monthly')
                ->selectRaw('period_year, period_month, count(*) as count, sum(total_amount) as total_amount')
                ->groupBy('period_year', 'period_month')
                ->orderBy('period_year', 'desc')
                ->orderBy('period_month', 'desc')
                ->limit(12)
                ->get(),
            'average_royalty_amount' => $query->avg('total_amount'),
            'collection_rate' => $query->count() > 0 ? 
                ($query->paid()->count() / $query->count()) * 100 : 0
        ];

        return response()->json([
            'success' => true,
            'data' => $stats,
            'message' => 'Royalty statistics retrieved successfully'
        ]);
    }

    /**
     * Get current user's royalties (for franchise owners)
     */
    public function myRoyalties(Request $request): JsonResponse
    {
        $user = $request->user();
        $franchise = Franchise::where('owner_id', $user->id)->first();

        if (!$franchise) {
            return response()->json([
                'success' => false,
                'message' => 'No franchise found for current user'
            ], 404);
        }

        $royalties = Royalty::where('franchise_id', $franchise->id)
            ->with(['franchise', 'unit'])
            ->paginate(15);

        return response()->json([
            'success' => true,
            'data' => $royalties,
            'message' => 'Royalties retrieved successfully'
        ]);
    }

    /**
     * Get current user's unit royalties (for unit managers)
     */
    public function myUnitRoyalties(Request $request): JsonResponse
    {
        $user = $request->user();
        $unit = Unit::where('manager_id', $user->id)->first();

        if (!$unit) {
            return response()->json([
                'success' => false,
                'message' => 'No unit found for current user'
            ], 404);
        }

        $royalties = Royalty::where('unit_id', $unit->id)
            ->with(['franchise', 'unit'])
            ->paginate(15);

        return response()->json([
            'success' => true,
            'data' => $royalties,
            'message' => 'Unit royalties retrieved successfully'
        ]);
    }
}
