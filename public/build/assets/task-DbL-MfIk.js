import{a_ as p}from"./main-BhQQEtPK.js";import{g as c}from"./api-router-C66GWYDG.js";class e{getBaseUrl(){return c("tasks")}async getMyTasks(a){const n=this.getBaseUrl(),t=new URLSearchParams;a!=null&&a.status&&t.append("status",a.status),a!=null&&a.priority&&t.append("priority",a.priority),a!=null&&a.category&&t.append("category",a.category),a!=null&&a.page&&t.append("page",a.page.toString()),a!=null&&a.perPage&&t.append("per_page",a.perPage.toString());const o=t.toString(),g=o?`${n}?${o}`:n;return await p(g,{method:"GET"})}async getFranchisorTasks(a){const n=new URLSearchParams;a!=null&&a.filter&&n.append("filter",a.filter),a!=null&&a.status&&n.append("status",a.status),a!=null&&a.priority&&n.append("priority",a.priority),a!=null&&a.category&&n.append("category",a.category),a!=null&&a.page&&n.append("page",a.page.toString()),a!=null&&a.perPage&&n.append("per_page",a.perPage.toString());const t=n.toString(),o=t?`/v1/franchisor/tasks?${t}`:"/v1/franchisor/tasks";return await p(o)}async createFranchisorTask(a){return await p("/v1/franchisor/tasks",{method:"POST",body:a})}async getStatistics(){const a=this.getBaseUrl();return await p(`${a}/statistics`,{method:"GET"})}async updateTaskStatus(a,n){const t=this.getBaseUrl();return await p(`${t}/${a}/status`,{method:"PATCH",body:{status:n}})}async getTask(a){const n=this.getBaseUrl();return await p(`${n}/${a}`,{method:"GET"})}async createTask(a){const n=this.getBaseUrl();return await p(n,{method:"POST",body:a})}async updateTask(a,n){const t=this.getBaseUrl();return await p(`${t}/${a}`,{method:"PUT",body:n})}async deleteTask(a){const n=this.getBaseUrl();return await p(`${n}/${a}`,{method:"DELETE"})}async getFranchiseeTasks(a){const n=new URLSearchParams;a!=null&&a.filter&&n.append("filter",a.filter),a!=null&&a.status&&n.append("status",a.status),a!=null&&a.priority&&n.append("priority",a.priority),a!=null&&a.category&&n.append("category",a.category),a!=null&&a.page&&n.append("page",a.page.toString()),a!=null&&a.perPage&&n.append("per_page",a.perPage.toString());const t=n.toString(),o=t?`/v1/unit-manager/my-tasks?${t}`:"/v1/unit-manager/my-tasks";return await p(o)}async createFranchiseeTask(a){return await p("/v1/unit-manager/tasks",{method:"POST",body:a})}async updateFranchiseeTask(a,n){return await p(`/v1/unit-manager/tasks/${a}`,{method:"PUT",body:n})}async deleteFranchiseeTask(a){return await p(`/v1/unit-manager/tasks/${a}`,{method:"DELETE"})}}const u=new e;export{u as t};
