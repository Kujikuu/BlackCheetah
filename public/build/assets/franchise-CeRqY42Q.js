import{a_ as r}from"./main-CSU6kgHA.js";import{g as c}from"./api-router-HVeB8xLM.js";class o{getBaseUrl(){return c("franchise")}async getFranchiseData(){return await r(`${this.getBaseUrl()}/data`,{ignoreErrorToast:!0})}async updateFranchise(n){return await r(`${this.getBaseUrl()}/update`,{method:"PUT",body:n})}async uploadLogo(n){const t=new FormData;return t.append("logo",n),await r(`${this.getBaseUrl()}/upload-logo`,{method:"POST",body:t})}async getFranchises(n){return await r(this.getBaseUrl(),{method:"GET",query:n})}async getFranchiseesWithUnit(n){return await r(`${this.getBaseUrl()}/franchisees-with-unit`,{method:"GET",query:n})}async createFranchise(n){return await r(this.getBaseUrl(),{method:"POST",body:n})}async getFranchiseById(n){return await r(`${this.getBaseUrl()}/${n}`)}async createFranchiseeWithUnit(n){return await r(`${this.getBaseUrl()}/franchisees-with-unit`,{method:"POST",body:n})}async getUnits(){return await r("/v1/franchisor/units")}async getUnitsStatistics(){return await r("/v1/franchisor/units/statistics")}async getFranchisees(){return await r("/v1/franchisor/franchisees")}async registerFranchise(n){return await r("/v1/franchisor/franchise/register",{method:"POST",body:n})}async getDashboardStats(){return await r("/v1/franchisor/dashboard/stats")}async getProfileCompletionStatus(){return await r("/v1/franchisor/profile/completion-status",{ignoreErrorToast:!0})}async getDashboardOperations(){return await r("/v1/franchisor/dashboard/operations")}async getDashboardLeads(){return await r("/v1/franchisor/dashboard/leads")}async getDashboardFinance(){return await r("/v1/franchisor/dashboard/finance")}async getDashboardTimeline(){return await r("/v1/franchisor/dashboard/timeline")}async getDocuments(n){return await r(`/v1/franchises/${n}/documents`)}async createDocument(n,t){const e=new FormData;return e.append("name",t.name),e.append("type",t.type),t.description&&e.append("description",t.description),t.status&&e.append("status",t.status),e.append("is_confidential",t.is_confidential?"1":"0"),t.expiry_date&&e.append("expiry_date",t.expiry_date),t.file&&e.append("file",t.file),await r(`/v1/franchises/${n}/documents`,{method:"POST",body:e})}async updateDocument(n,t,e){const s=new FormData;return e.name&&s.append("name",e.name),e.type&&s.append("type",e.type),e.description&&s.append("description",e.description),e.status&&s.append("status",e.status),e.is_confidential!==void 0&&s.append("is_confidential",e.is_confidential?"1":"0"),e.expiry_date&&s.append("expiry_date",e.expiry_date),e.file&&s.append("file",e.file),await r(`/v1/franchises/${n}/documents/${t}`,{method:"PUT",body:s})}async deleteDocument(n,t){return await r(`/v1/franchises/${n}/documents/${t}`,{method:"DELETE"})}async downloadDocument(n,t){return await r(`/v1/franchises/${n}/documents/${t}/download`,{method:"GET"})}async getProducts(n){return await r(`/v1/franchises/${n}/products`)}async createProduct(n,t){const e=new FormData;e.append("name",t.name),e.append("description",t.description),e.append("category",t.category),e.append("status",t.status||"active");const s=t.price||t.unit_price||0;return e.append("unit_price",s.toString()),t.stock!==void 0&&e.append("stock",t.stock.toString()),t.sku&&e.append("sku",t.sku),t.image&&e.append("image",t.image),await r(`/v1/franchises/${n}/products`,{method:"POST",body:e})}async updateProduct(n,t,e){const s=e.image?(()=>{const i=new FormData;e.name&&i.append("name",e.name),e.description&&i.append("description",e.description),e.category&&i.append("category",e.category),e.status&&i.append("status",e.status);const a=e.price||e.unit_price;return a!==void 0&&i.append("unit_price",a.toString()),e.stock!==void 0&&i.append("stock",e.stock.toString()),e.sku&&i.append("sku",e.sku),e.image&&i.append("image",e.image),i})():e;return await r(`/v1/franchises/${n}/products/${t}`,{method:"PUT",body:s})}async deleteProduct(n,t){return await r(`/v1/franchises/${n}/products/${t}`,{method:"DELETE"})}async uploadRegistrationDocument(n,t,e,s){const i=new FormData;return i.append("file",t),i.append("name",e),i.append("description",`${e} uploaded during franchise registration`),i.append("type",s),await r(`/v1/franchises/${n}/documents`,{method:"POST",body:i})}async updateUnitStatus(n,t){return await r(`/v1/units/${n}/status`,{method:"PATCH",body:{status:t}})}async assignBroker(n,t){return await r(`/v1/franchisor/franchises/${n}/assign-broker`,{method:"PATCH",body:{broker_id:t}})}async getBrokers(){return await r("/v1/franchisor/brokers")}}const f=new o;export{f};
