import{g as s,O as M,bc as r}from"./main-CJoUlw71.js";import{f as v}from"./franchise-CaBrEO2E.js";import{l as N}from"./lead-CW0oUHwc.js";import{u as C}from"./users-Dd4GaIo9.js";const _=()=>{const h=s(!1),m=s(null),f=s(null),o=s([]),p=s([]),n=s([]),d=s(null),i=s(!0),y=s(!1),g=e=>{if(!e)return"Unknown";const t=new Date(e);if(Number.isNaN(t.getTime()))return console.warn("Invalid date string:",e),"Unknown";const l=new Date().getTime()-t.getTime(),c=Math.floor(l/(1e3*60*60));if(c<1)return"Just now";if(c<24)return`${c} hours ago`;const u=Math.floor(c/24);return u===1?"1 day ago":u<7?`${u} days ago`:u<30?`${Math.floor(u/7)} weeks ago`:t.toLocaleDateString()},L=M(()=>y.value?!0:i.value),w=async()=>{try{h.value=!0,m.value=null;const e=await v.getDashboardStats();if(e.success&&e.data)f.value=e.data;else throw new Error("Failed to fetch dashboard stats")}catch(e){m.value=e.message||"Failed to fetch dashboard statistics",console.error("Dashboard stats error:",e)}finally{h.value=!1}},A=async()=>{try{const e=await C.getSalesAssociates();e.success&&e.data?o.value=e.data.map(t=>({id:t.id,name:t.name,email:t.email,phone:"",status:t.status||"active",leads_count:0,created_at:t.created_at})):o.value=[]}catch(e){console.error("Sales associates error:",e),o.value=[]}},b=async(e=10)=>{try{const t=await N.getLeadsWithLimit(e);t.success&&t.data?n.value=t.data:n.value=[]}catch(t){console.error("Leads error:",t),n.value=[]}},D=async()=>{try{const e=await v.getProfileCompletionStatus();e.success&&e.data?(d.value=e.data,i.value=!0):(i.value=!1,d.value=null)}catch(e){e.status===404||e.data&&e.data.success===!1?(i.value=!1,d.value=null):(i.value=!0,console.error("Profile completion error:",e))}},k=()=>{y.value=!0},S=()=>{var t;const e=[];Array.isArray(n.value)&&n.value.length>0&&n.value.slice(0,3).forEach(a=>{const l=`${a.firstName||""} ${a.lastName||""}`.trim()||"Unknown Lead",c=new Date().toISOString();e.push({id:a.id,type:"lead",title:`New lead: ${l}`,time:g(c),icon:"tabler-user-plus",color:"primary"})}),Array.isArray(o.value)&&o.value.length>0&&o.value.slice(0,2).forEach(a=>{if(a.status==="active"){const l=a.created_at||new Date().toISOString();e.push({id:a.id,type:"team",title:`${a.name} is managing ${a.leads_count} leads`,time:g(l),icon:"tabler-user-check",color:"info"})}}),(t=f.value)!=null&&t.currentMonthRevenue&&e.push({id:Date.now(),type:"revenue",title:`Monthly revenue: $${f.value.currentMonthRevenue.toLocaleString()}`,time:"This month",icon:"tabler-currency-riyal",color:"warning"}),p.value=e.filter(a=>a.time!=="Invalid Date").slice(0,5)},$=async()=>{await Promise.all([w(),A(),b(10),D()]),S()},E=async()=>{await $()},I=async()=>{try{return(await v.getFranchiseData()).success===!0}catch(e){return e.status===404?!1:(console.error("Error checking franchise existence:",e),!0)}};return{isLoading:r(h),error:r(m),dashboardStats:r(f),salesAssociates:r(o),recentActivities:r(p),leads:r(n),profileCompletionStatus:r(d),isProfileComplete:r(L),franchiseExists:r(i),fetchDashboardStats:w,fetchSalesAssociates:A,fetchLeads:b,fetchProfileCompletion:D,dismissBanner:k,initializeDashboard:$,refreshDashboard:E,generateRecentActivities:S,checkFranchiseExists:I}};export{_ as u};
